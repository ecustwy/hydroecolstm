dynamic_data_file:
  - C:/Users/nguyenta/Documents/GitHub/hydroecolstm/examples/1_streamflow_simulation/data/time_series.csv

static_data_file:
  - C:/Users/nguyenta/Documents/GitHub/hydroecolstm/examples/1_streamflow_simulation/data/static_attributes.csv

output_directory:
  - C:/Users/nguyenta/Documents/GitHub/hydroecolstm/examples/1_streamflow_simulation/results

input_static_features:
  - elev_mean
  - slope_mean
  - p_seasonality
  - aridity
  - pet_mean

input_dynamic_features:
  - precipitation_mm_d
  - temperature_mean_degC

target_features:
  - discharge_vol_m3_s

object_id:
  - 2009
  - 2016
  - 2018
  - 2019
  - 2020
  - 2024
  - 2030
  - 2033

train_period: 
  - 2010-01-01 00:00
  - 2020-12-31 00:00

valid_period: 
  - 2006-01-01 00:00
  - 2009-12-31 00:00

test_period: 
  - 2001-01-01 00:00
  - 2005-12-31 00:00

model_class: LSTM

Regression:
  activation_function:
    - Identity
  num_neurons:
    - None
  num_layers: 1

scaler_input_dynamic_features:
  - Z-score
scaler_input_static_features:
  - Z-score
scaler_target_features:
  - MinMaxScaler

hidden_size: 30

num_layers: 1

n_epochs: 300

learning_rate: 0.005

dropout: 0.3

warmup_length: 30

loss_function: RMSE

sequence_length: 365

batch_size: 8

patience: 30

eval_function: NSE

static_data_file_forecast:
  - static_data_file

dynamic_data_file_forecast:
  - dynamic_data_file

forecast_period: 
  - 2001-01-01 00:00
  - 2009-12-31 00:00

object_id_forecast:
  - 2011
  - 2029

#({'2009': tensor([0.8372]), 
#  '2016': tensor([0.9073]), 
#  '2018': tensor([0.9072]), 
#  '2019': tensor([0.7205]), 
#  '2020': tensor([0.8170]), 
#  '2024': tensor([0.8604]), 
#  '2030': tensor([0.8806]), 
#  '2033': tensor([0.6892])}, tensor(0.8274))

#({'2009': tensor([0.8350]), 
#  '2016': tensor([0.8751]), 
#  '2018': tensor([0.8534]), 
#  '2019': tensor([0.7367]), 
#  '2020': tensor([0.8022]), 
#  '2024': tensor([0.8201]), 
#  '2030': tensor([0.8729]), 
#  '2033': tensor([0.6931])}, tensor(0.8111))

#({'2009': tensor([0.7950]), 
#  '2016': tensor([0.8917]), 
#  '2018': tensor([0.8843]), 
#  '2019': tensor([0.7011]), 
#  '2020': tensor([0.7913]), 
#  '2024': tensor([0.8159]), 
#  '2030': tensor([0.8709]), 
#  '2033': tensor([0.5723])}, tensor(0.7903))

#({'2011': tensor([0.8327]), '2029': tensor([0.5283])}, tensor(0.6805))